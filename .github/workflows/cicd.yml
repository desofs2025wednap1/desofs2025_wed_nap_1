name: Java CI Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

env:
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  PGPASSWORD: ${{ secrets.PGPASSWORD }}

jobs:
  setup-java-and-cache:
    # A reusable job just to set up JDK and cache Maven repo, to be reused by other jobs via needs.
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-maven.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

  unit-tests:
    needs: setup-java-and-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Must checkout here because job is independent

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        run: mvn clean test -PunitTest --batch-mode --fail-at-end

      - name: Upload unit test reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: target/surefire-reports/

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for Postgres to be ready and create test DB
        run: |
          timeout=60
          elapsed=0
          until pg_isready -h localhost -p 5432 -U $POSTGRES_USER || [ $elapsed -ge $timeout ]; do
            echo "Waiting for Postgres to be ready..."
            sleep 2
            elapsed=$((elapsed+2))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Postgres did not start in time"
            exit 1
          fi
          psql -h localhost -U $POSTGRES_USER -c "CREATE DATABASE perfumetest;" -d postgres

      - name: Run integration tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/perfumetest
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: mvn verify -PintegrationTest --batch-mode --fail-at-end

      - name: Upload integration test report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: target/failsafe-reports/
          if-no-files-found: warn

  package:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build package without tests
        run: mvn clean package "-Dskip.unit.tests=true" "-Dskip.integration.tests=true" --batch-mode --fail-at-end

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-package
          path: target/*.jar

  deploy:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download packaged JAR from previous job
        uses: actions/download-artifact@v4
        with:
          name: java-package
          path: target

      - name: Start services with Docker Compose
        run: docker compose up -d --build

    #  - name: Wait for application to be ready
    #    run: |
    #      echo "Waiting for REST API to be ready on port 8080..."
    #      for i in {1..30}; do
    #        if curl -s http://localhost:8080/ | grep -q '"status":"UP"'; then
    #          echo "Application is up!"
    ##          exit 0
    #        else
    #          echo "Waiting..."
    #          sleep 5
    #        fi
     #     done
    #      echo "Application did not start in time"
     #     exit 1

      - name: List Docker containers
        run: docker ps -a

      - name: Show Docker logs
        run: docker compose logs rest-ecommerce

#      - name: Stop and remove Docker Compose services
#        if: always()
#        run: docker compose down



  dast-scan:
      needs: deploy
      runs-on: ubuntu-latest
      steps:
        - name: Wait for app to be ready
          run: |
            echo "Waiting for app at http://localhost:8080..."
            for i in {1..30}; do
              if curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"'; then
                echo "App is ready!"
                exit 0
              else
                echo "Waiting..."
                sleep 5
              fi
            done
            echo "App did not start in time"
            exit 1

        - name: Run OWASP ZAP Baseline Scan
          run: |
            docker run --network host \
              -v ${{ github.workspace }}/securityReports:/zap/wrk \
              owasp/zap2docker-stable zap-baseline.py \
              -t http://localhost:8080 \
              -r zap-report.html \
              -x zap-report.xml \
              --hook=/zap/wrk \
              --format sarif -o zap-DAST.sarif || true

        - name: Upload ZAP HTML report
          uses: actions/upload-artifact@v4
          with:
            name: zap-report-html
            path: securityReports/zap-report.html

        - name: Upload ZAP SARIF report
          uses: actions/upload-artifact@v4
          with:
            name: zap-report-sarif
            path: securityReports/zap-DAST.sarif

        - name: Upload SARIF to Security
          uses: github/codeql-action/upload-sarif@v3
          with:
            sarif_file: securityReports/zap-DAST.sarif

        - name: Stop and remove Docker services
          if: always()
          run: docker compose down || true