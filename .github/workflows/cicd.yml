name: Java CI Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: root
  PGPASSWORD: root

jobs:
  setup-java-and-cache:
    # A reusable job just to set up JDK and cache Maven repo, to be reused by other jobs via needs.
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-maven.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

  unit-tests:
    needs: setup-java-and-cache
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # Must checkout here because job is independent

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        run: mvn clean test -PunitTest --batch-mode --fail-at-end

      - name: Upload unit test reports
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-reports
          path: target/surefire-reports/

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Wait for Postgres to be ready and create test DB
        run: |
          timeout=60
          elapsed=0
          until pg_isready -h localhost -p 5432 -U $POSTGRES_USER || [ $elapsed -ge $timeout ]; do
            echo "Waiting for Postgres to be ready..."
            sleep 2
            elapsed=$((elapsed+2))
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Postgres did not start in time"
            exit 1
          fi
          psql -h localhost -U $POSTGRES_USER -c "CREATE DATABASE perfumetest;" -d postgres

      - name: Run integration tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/perfumetest
          SPRING_DATASOURCE_USERNAME: ${{ env.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: mvn verify -PintegrationTest --batch-mode --fail-at-end

      - name: Upload integration test reports
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: target/surefire-reports/

  package:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17 and restore cache
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build package without tests
        run: mvn clean package "-Dskip.unit.tests=true" "-Dskip.integration.tests=true" --batch-mode --fail-at-end

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: java-package
          path: target/*.jar

      # Optional: deploy to Docker locally (if needed)
    #  - name: Build Docker image
   #     run: docker build -t dsoft-ecommerce-spring .

      # Optional: run the app container (if needed)
   #   - name: Run app container locally
   #     run: docker run -d --network host dsoft-ecommerce-spring

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
   # - name: Update dependency graph
   #   uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
